{
  "ver": "1.0.23",
  "uuid": "af5e3035-1466-4ff8-9a93-fd03d05ea5ee",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 iResolution;\nuniform float time;\nvec2 hash( vec2 p )\n{\n  p = vec2( dot(p,vec2(127.1,311.7)),\n  dot(p,vec2(269.5,183.3)));\n  return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n  const float K1 = 0.366025404;\n\n  const float K2 = 0.211324865;\n\n  vec2 i = floor( p + (p.x+p.y)*K1 );\n  \n  vec2 a = p - i + (i.x+i.y)*K2;\n  vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n  vec2 b = a - o + K2;\n  vec2 c = a - 1.0 + 2.0*K2;\n  \n  vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n  \n  vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n  \n  return dot(n, vec3(70.0));\n}\n\nfloat fbm(vec2 uv)\n{\n  float f;\n  mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n  f  = 0.5000*noise( uv ); uv = m*uv;\n  f += 0.2500*noise( 4. * uv ); uv = m*uv;\n  f += 0.1250*noise( 8. * uv ); uv = m*uv;\n  f += 0.0625*noise( 16. * uv ); uv = m*uv;\n  f = 0.5 + 0.5*f;\n  return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec2 q = uv;\n  q.x *= 1.;\n  q.y *= 2.;\n  float strength = floor(q.x+1.);\n  float T3 = max(3.,1.25*strength)*time;\n  q.x = mod(q.x,1.)-0.5;\n  q.y -= 0.25;\n  float n = fbm(strength*q - vec2(0,T3));\n  float c = 1. - 16. * pow( max( 0., length(q*vec2(1.8+q.y*1.5,.75) ) - n * max( 0., q.y+.25 ) ),1.2 );\n\n  float c1 = n * c * (1.5-pow(2.50*uv.y,4.));\n  c1=clamp(c1,0.,1.);\n\n  vec3 col = vec3(1.5*c1, 1.5*c1*c1*c1, c1*c1*c1*c1*c1*c1);\n  \n  #if BLUE_FLAME\n    col = col.zyx;\n  #endif\n  #if GREEN_FLAME\n    col = 0.85*col.yxz;\n  #endif\n  \n  float a = c * (1.-pow(uv.y,3.));\n  fragColor = vec4( mix(vec3(0.),col,a), 1.0);\n}\nvoid main () {\n  vec2 uv = 1. - v_uv0;\n  mainImage(gl_FragColor,uv.xy * iResolution.xy);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform ARGS {\n  vec2 iResolution;\n  float time;\n}\n\nvec2 hash( vec2 p )\n{\n  p = vec2( dot(p,vec2(127.1,311.7)),\n  dot(p,vec2(269.5,183.3)));\n  return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n  const float K1 = 0.366025404;\n\n  const float K2 = 0.211324865;\n\n  vec2 i = floor( p + (p.x+p.y)*K1 );\n  \n  vec2 a = p - i + (i.x+i.y)*K2;\n  vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n  vec2 b = a - o + K2;\n  vec2 c = a - 1.0 + 2.0*K2;\n  \n  vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n  \n  vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n  \n  return dot(n, vec3(70.0));\n}\n\nfloat fbm(vec2 uv)\n{\n  float f;\n  mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n  f  = 0.5000*noise( uv ); uv = m*uv;\n  f += 0.2500*noise( 4. * uv ); uv = m*uv;\n  f += 0.1250*noise( 8. * uv ); uv = m*uv;\n  f += 0.0625*noise( 16. * uv ); uv = m*uv;\n  f = 0.5 + 0.5*f;\n  return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec2 q = uv;\n  q.x *= 1.;\n  q.y *= 2.;\n  float strength = floor(q.x+1.);\n  float T3 = max(3.,1.25*strength)*time;\n  q.x = mod(q.x,1.)-0.5;\n  q.y -= 0.25;\n  float n = fbm(strength*q - vec2(0,T3));\n  float c = 1. - 16. * pow( max( 0., length(q*vec2(1.8+q.y*1.5,.75) ) - n * max( 0., q.y+.25 ) ),1.2 );\n\n  float c1 = n * c * (1.5-pow(2.50*uv.y,4.));\n  c1=clamp(c1,0.,1.);\n\n  vec3 col = vec3(1.5*c1, 1.5*c1*c1*c1, c1*c1*c1*c1*c1*c1);\n  \n  #if BLUE_FLAME\n    col = col.zyx;\n  #endif\n  #if GREEN_FLAME\n    col = 0.85*col.yxz;\n  #endif\n  \n  float a = c * (1.-pow(uv.y,3.));\n  fragColor = vec4( mix(vec3(0.),col,a), 1.0);\n}\nvoid main () {\n  vec2 uv = 1. - v_uv0;\n  mainImage(gl_FragColor,uv.xy * iResolution.xy);\n}\n"
      }
    }
  ],
  "subMetas": {}
}