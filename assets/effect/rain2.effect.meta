{
  "ver": "1.0.23",
  "uuid": "dd342cb6-87b8-4e5d-b2cd-e94efed89ec7",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTex;\nuniform vec2 iResolution;\nuniform float time;\nvec3 rotateX(vec3 p, float t)\n{\n  float s = sin(t);\n  float c = cos(t);\n  mat3 m = mat3(\n    1.0, 0.0, 0.0, \n    0.0, c, -s, \n    0.0, s, c\n    );\n  return p * m;\n}\n\nvec3 rotateY(vec3 p, float t)\n{\n  float s = sin(t);\n  float c = cos(t);\n  mat3 m = mat3(\n    c, 0.0, s, \n    0.0, 1, 0.0, \n    -s, 0.0, c\n    );\n  return p * m;\n}\n\nvec3 rotateZ(vec3 p, float t)\n{\n  float s = sin(t);\n  float c = cos(t);\n  mat3 m = mat3(\n    c, -s, 0.0, \n    s, c, 0.0, \n    0.0, 0.0, 1.0\n    );\n  return p * m;\n}\n\nfloat noise (in vec3 p) {\n  vec3 f = fract (p);\n  p = floor (p);\n\n  f = f * f * (3.0 - 2.0 * f);\n  f.xy += p.xy + p.z * vec2 (37.0, 17.0);\n  f.xy = texture2D (noiseTex, (f.xy + 0.5) / 256.0, -256.0).yx;\n  return mix (f.x, f.y, f.z);\n}\n\nfloat fbm (in vec3 p) {\n  return noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0;\n}\n\nfloat city (in vec2 uv, in float offset)\n{\n    vec2 grid = vec2(20., 1.);\n    uv.x += offset;\n    float n1 = fbm((vec2(ivec2(uv * grid)) + .5).xxx);\n    uv.x *= n1 * 6.;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n = fbm(id.xxx);\n    float buildingHeight = n;\n    buildingHeight = (n1 > .3) ? buildingHeight + fract(uv * grid).x * n1 * .1 : buildingHeight;\n  return (uv.y < buildingHeight) ? 1. : 0.;\n}\n\nfloat cityLights (in vec2 uv, in float offset)\n{\n    vec2 grid = vec2(20., 1.);\n    uv.x += offset;\n    float n1 = fbm((vec2(ivec2(uv * grid)) + .5).xxx);\n    uv.x *= n1 * 6.;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n = fbm(id.xxx);\n    vec2 lightGrid = vec2(79. * (n + .5), 200. * n);\n    float n2 = fbm((vec2(ivec2(uv * lightGrid + floor(time * .2) * .1)) + .5).xyx);\n    vec2 lPos = fract(uv * lightGrid);\n    n2 = (lPos.y < .2 || lPos.y > .7) ? 0. : n2;\n    n2 = (lPos.x < .5 || lPos.y > .7) ? 0. : n2;\n    n2 = smoothstep(.2 + .1 * cos(time * .1), .6, n2);\n  return (uv.y < n - 0.01) ? n2 : 0.;\n}\n\nfloat rainLayer (in vec2 uv, in float offset, in float rotate, in vec2 grid, in float density)\n{\n  uv = rotateZ(uv.xyx, rotate).xy;\n    uv.x += offset;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n1 = fbm(id.xxx);\n    uv.y += time * (n1 + .5) * density;\n    id = vec2(ivec2(uv * grid)) + .5;\n    vec2 mid = abs(fract(uv * grid));\n    mid.x *= 2.;\n    float n = fbm(id.xyx);\n  return mid.x * (1. - mid.y) * smoothstep(.3, .4, n) * smoothstep(0., .5, mid.x)*smoothstep(1., .5, mid.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  float r1 = rainLayer(uv, 23., .4, vec2(76., 6.), 2.1);\n  r1 += rainLayer(uv, 38., .38, vec2(96., 6.), 2.);\n  r1 += rainLayer(uv, 38.4, .38, vec2(96., 6.), 2.3) * .5;\n  vec3 f = mix(vec3(0.2, 0.4, .6) * .5, vec3(.2, .3, .6) * .2, uv.y);\n  f -= city(uv, 3.) * .1 ;\n  f -= city(uv, 2.);\n  f = clamp(f, vec3(0.), vec3(1.));\n  f += r1;\n  f += cityLights(uv, 2.);\n  f -= city(uv * vec2(1., 2.5) + vec2(0., .0), 64.);\n  fragColor = vec4(f,1.0);\n}\nvoid main () {\n  mainImage(gl_FragColor,v_uv0.xy * iResolution.xy);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTex;\nuniform ARGS {\n  vec2 iResolution;\n  float time;\n}\n\nvec3 rotateX(vec3 p, float t)\n{\n  float s = sin(t);\n  float c = cos(t);\n  mat3 m = mat3(\n    1.0, 0.0, 0.0, \n    0.0, c, -s, \n    0.0, s, c\n    );\n  return p * m;\n}\n\nvec3 rotateY(vec3 p, float t)\n{\n  float s = sin(t);\n  float c = cos(t);\n  mat3 m = mat3(\n    c, 0.0, s, \n    0.0, 1, 0.0, \n    -s, 0.0, c\n    );\n  return p * m;\n}\n\nvec3 rotateZ(vec3 p, float t)\n{\n  float s = sin(t);\n  float c = cos(t);\n  mat3 m = mat3(\n    c, -s, 0.0, \n    s, c, 0.0, \n    0.0, 0.0, 1.0\n    );\n  return p * m;\n}\n\nfloat noise (in vec3 p) {\n  vec3 f = fract (p);\n  p = floor (p);\n\n  f = f * f * (3.0 - 2.0 * f);\n  f.xy += p.xy + p.z * vec2 (37.0, 17.0);\n  f.xy = texture2D (noiseTex, (f.xy + 0.5) / 256.0, -256.0).yx;\n  return mix (f.x, f.y, f.z);\n}\n\nfloat fbm (in vec3 p) {\n  return noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0;\n}\n\nfloat city (in vec2 uv, in float offset)\n{\n    vec2 grid = vec2(20., 1.);\n    uv.x += offset;\n    float n1 = fbm((vec2(ivec2(uv * grid)) + .5).xxx);\n    uv.x *= n1 * 6.;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n = fbm(id.xxx);\n    float buildingHeight = n;\n    buildingHeight = (n1 > .3) ? buildingHeight + fract(uv * grid).x * n1 * .1 : buildingHeight;\n  return (uv.y < buildingHeight) ? 1. : 0.;\n}\n\nfloat cityLights (in vec2 uv, in float offset)\n{\n    vec2 grid = vec2(20., 1.);\n    uv.x += offset;\n    float n1 = fbm((vec2(ivec2(uv * grid)) + .5).xxx);\n    uv.x *= n1 * 6.;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n = fbm(id.xxx);\n    vec2 lightGrid = vec2(79. * (n + .5), 200. * n);\n    float n2 = fbm((vec2(ivec2(uv * lightGrid + floor(time * .2) * .1)) + .5).xyx);\n    vec2 lPos = fract(uv * lightGrid);\n    n2 = (lPos.y < .2 || lPos.y > .7) ? 0. : n2;\n    n2 = (lPos.x < .5 || lPos.y > .7) ? 0. : n2;\n    n2 = smoothstep(.2 + .1 * cos(time * .1), .6, n2);\n  return (uv.y < n - 0.01) ? n2 : 0.;\n}\n\nfloat rainLayer (in vec2 uv, in float offset, in float rotate, in vec2 grid, in float density)\n{\n  uv = rotateZ(uv.xyx, rotate).xy;\n    uv.x += offset;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n1 = fbm(id.xxx);\n    uv.y += time * (n1 + .5) * density;\n    id = vec2(ivec2(uv * grid)) + .5;\n    vec2 mid = abs(fract(uv * grid));\n    mid.x *= 2.;\n    float n = fbm(id.xyx);\n  return mid.x * (1. - mid.y) * smoothstep(.3, .4, n) * smoothstep(0., .5, mid.x)*smoothstep(1., .5, mid.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  float r1 = rainLayer(uv, 23., .4, vec2(76., 6.), 2.1);\n  r1 += rainLayer(uv, 38., .38, vec2(96., 6.), 2.);\n  r1 += rainLayer(uv, 38.4, .38, vec2(96., 6.), 2.3) * .5;\n  vec3 f = mix(vec3(0.2, 0.4, .6) * .5, vec3(.2, .3, .6) * .2, uv.y);\n  f -= city(uv, 3.) * .1 ;\n  f -= city(uv, 2.);\n  f = clamp(f, vec3(0.), vec3(1.));\n  f += r1;\n  f += cityLights(uv, 2.);\n  f -= city(uv * vec2(1., 2.5) + vec2(0., .0), 64.);\n  fragColor = vec4(f,1.0);\n}\nvoid main () {\n  mainImage(gl_FragColor,v_uv0.xy * iResolution.xy);\n}\n"
      }
    }
  ],
  "subMetas": {}
}