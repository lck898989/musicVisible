{
  "ver": "1.0.23",
  "uuid": "a0a016dc-9ba8-485d-8258-4ac53d86efc3",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n\nfloat startX = 0.0;\nfloat thresholdX = 0.08;\nfloat blur = 0.01;\nfloat posInterval = 0.02;\nuniform float time;\nfloat colFactor(vec2 uv, float thresholdX, float blur){\n    float intervalY = uv.y;\n    float tempX = intervalY * cos(radians(60.0)) + startX;\n    float intervalX = uv.x - tempX;\n    float intervalXAbs = abs(intervalX);\n    if(intervalXAbs < 0.04) {\n      return 1.;\n    } else if(intervalXAbs > 0.08) {\n      return 0.;\n    } else {\n      return 3.* intervalXAbs * intervalXAbs - 2. * intervalXAbs * intervalXAbs * intervalXAbs;\n    }\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ,vec2 res)\n{\n\n    vec2 uv = fragCoord/res.xy;\n    startX = tan(time * 3.);\n\n    float factor = colFactor(uv, thresholdX, blur);\n    vec4 texColor = texture2D(texture,v_uv0);\n\n    vec4 factorColor = factor * vec4(1.0, 1., 1., 1.0) + texColor * (1.0 - factor);\n    fragColor = factorColor;\n}\nvoid main () {\n  vec2 res = vec2(300.,300.);\n  mainImage(gl_FragColor,v_uv0.xy * res.xy,res);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\n\nfloat startX = 0.0;\nfloat thresholdX = 0.08;\nfloat blur = 0.01;\nfloat posInterval = 0.02;\nuniform ARGS {\n  vec2 iResolution;\n  float time;\n}\nfloat colFactor(vec2 uv, float thresholdX, float blur){\n    float intervalY = uv.y;\n    float tempX = intervalY * cos(radians(60.0)) + startX;\n    float intervalX = uv.x - tempX;\n    float intervalXAbs = abs(intervalX);\n    if(intervalXAbs < 0.04) {\n      return 1.;\n    } else if(intervalXAbs > 0.08) {\n      return 0.;\n    } else {\n      return 3.* intervalXAbs * intervalXAbs - 2. * intervalXAbs * intervalXAbs * intervalXAbs;\n    }\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ,vec2 res)\n{\n\n    vec2 uv = fragCoord/res.xy;\n    startX = tan(time * 3.);\n\n    float factor = colFactor(uv, thresholdX, blur);\n    vec4 texColor = texture2D(texture,v_uv0);\n\n    vec4 factorColor = factor * vec4(1.0, 1., 1., 1.0) + texColor * (1.0 - factor);\n    fragColor = factorColor;\n}\nvoid main () {\n  vec2 res = vec2(300.,300.);\n  mainImage(gl_FragColor,v_uv0.xy * res.xy,res);\n}\n"
      }
    }
  ],
  "subMetas": {}
}