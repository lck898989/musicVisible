// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform ARGS {
    vec2 iResolution;
    sampler2D tex;
    float time;
  }
  float iSampleRate = 44100.;
  void mainImage( out vec4 fragColor, in vec2 fragCoord ,vec2 res)
  {
    vec2 uv = fragCoord.xy / res.xy;
    uv.y = 1. - uv.y;
    uv.x = 1. - uv.x;
    // uv = cc.vec2(1.-uv.x,1.-uv.y);
    float dx = 1./res.x;
    float fmax = iSampleRate/4.;
    float c=0.;
    float cg = 0.;
    float cb = 0.;
    for(int once=0; once<1; once++) { // because early returns cause issues on some compilers
        if (uv.y>.9) {
            // bars
            if ((uv.x<4.*dx)||(1.-uv.x<4.*dx))
            { 
              fragColor = vec4(1.,.7,0.,0.6);
              break;
            }
            if ((abs(uv.x-2./12.)<dx)||(abs(uv.x-3./12.)<dx)||(abs(uv.x-5./12.)<dx)||(abs(uv.x-7./12.)<dx)||(abs(uv.x-8./12.)<dx)||(abs(uv.x-10./12.)<dx)) {
              fragColor = vec4(.4,.4,1.,0.6);
              break;
            }
            if (mod(uv.x,1./12.)<dx) {
              fragColor = vec4(0.,0.,.7,0.6);
              break;
            }
            // data
            float f = 440.*pow(2.,uv.x); // still, avoid < 440Hz since not enough resolution
            for (float i=1.; i<=5.; i++) { 
              if (f>=440.) c = max(c,texture(tex,vec2(f/fmax,.5/2.)).r);
                f *= 2.;
            }
            c = (c-.3)*1.5;
            fragColor=vec4(1.5*c,c,.7*c,1);
            break;
        } else if (uv.y>.6) {  // 2nd sub-window: narrow spectrum
          uv.y = (uv.y-.6)/.3;
          uv.x /= 5.;
          float f = uv.x*fmax;
          // bars
          if (abs(f-440.)< fmax/(5.*res.x)) { 
            fragColor = vec4(1.,.7,0.,0.6); 
            break;	
          }
          if (mod(log(f/440.)/log(2.),1.)< .5/(res.x*uv.x)) { 
            fragColor = vec4(.7,0.,0.,0.6); 
            break;	
          }
          if (mod(f,440.)< fmax/(5.*res.x)) { 
            fragColor = vec4(0.,.7,0.,0.6); 
            break;	
          }
          // data
          vec4 textureColor = texture(tex,vec2(uv.x,.5/2.));
          cg = 0.1 * sin(textureColor.g * 0.5 + time) + 0.9;
          cb = 0.1 * sin(textureColor.b * 0.3 + time) + 0.9;
          c = textureColor.r;
          c = (uv.y<c) ? 1. : 0.;
        } else if (uv.y>.3) {  // 3rd sub-window: large spectrum
          // 大的声谱
          uv.y = (uv.y-.3)/.3; 
          float f = uv.x*fmax;
          // bars
          if (abs(f-440.)< fmax/res.x) { 
            fragColor = vec4(1.,.7,0.,0.6); 
            break;	
          }
          if (mod(log(f/440.)/log(2.),1.)< 2./(res.x*uv.x)) { 
            fragColor = vec4(.7,0.,0.,0.6); 
            break;	
          } 
          if (mod(f,440.)< fmax/res.x) { 
            fragColor = vec4(0.,.7,0.,0.6); 
            break; 
          }
          //data
          vec4 textureColor = texture(tex,vec2(uv.x,.5/2.));
          cg = 0.1 * sin(textureColor.g * 0.5 + time) + 0.9;
          cb = 0.1 * sin(textureColor.b * 0.3 + time) + 0.9;
          c = texture(tex,vec2(uv.x,.5/2.)).r;
          c = (uv.y<c) ? 1. : 0.;
        }

        else { // 4th sub-window: signal
          uv.y = (uv.y-0.)/.3;
          #if 1 // synchro: start signal on a min value
            float m=999., xm;
            for (float x=0.5; x< 100.; x+=1.) {
                c =  texture(tex,vec2(x/512.,1.5/2.)).r;
                if (c<m) {
                  m=c; 
                  xm=x;
                }
            }
            uv.x += xm/512.;
          #endif
          vec4 textureColor = texture(tex,vec2(uv.x,.5/2.));
          cg = 0.1 * sin(textureColor.g * 0.5 + time) + 0.9;
          cb = 0.1 * sin(textureColor.b * 0.3 + time) + 0.9;
          c = texture(tex,vec2(uv.x,1.5/2.)).r;
          c = (uv.y<c) ? 1. : 0.;
        }
        // c.r = 0.5 * sin(uv.x * 3. + time) + 0.5;
        // c += 0.05 * sin(uv.x * 3. + time);
        // c.g = 0.5 * sin(uv.x * 3. + time) + 0.51;
        fragColor = vec4(c,c,c,1.0);
    }}
  void main () {
    vec2 res = vec2(960.,320.);
    mainImage(gl_FragColor,v_uv0.xy * res.xy,res);
  }
}%
