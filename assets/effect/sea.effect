// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform ARGS {
    vec2 iResolution;
    float time
  }
  #define DEEP 10
  float random(vec2 uv) {
    return fract(sin(dot(uv.xy,vec2(13.0909,783.342))) * 423234.323);
  }
  vec2 random2(vec2 uv){
    float res = fract(sin(dot(uv.xy,vec2(132.090,989.232))) * 232324.123);
    return vec2(res);
  }
  vec3 cellNoise(vec2 uv) {
    uv *= 3.0;
    vec2 i_st = floor(uv);
    vec2 f_st = fract(uv);
    
    /*vec2 point = random2(i);
    vec2 dist = point - f;
    float di = length(dist);
    */
    vec3 color = vec3(0.);
    float m_dist = 1.;
    for(int i = -1; i <=1; i++) {
      for(int j = -1; j <= 1; j++) {
        vec2 neighbor = vec2(float(j),float(i));
        vec2 point = random2(i_st + neighbor);
        point = 0.5 + 0.5 * sin(time + 6.283 * point);
        // 像素点到随机点的距离
        vec2 diff = neighbor + point - f_st;
        float dist = length(diff);
        m_dist = min(m_dist,dist);
      }
    }
    color += m_dist;
    return color;
  }
  vec3 fbm_noise(vec2 uv) {
      vec3 res = vec3(0.);
      float a = 0.0;
      float b = 0.0;
      for(int i = 0; i < DEEP; i++) {
        a += (float(i) + 1.);
        b = 1. / a;
        res += b * cellNoise(a * uv);
      }
    return res;
  }
  void mainImage( out vec4 fragColor, in vec2 fragCoord,vec4 textColor)
  {
      // Normalized pixel coordinates (from 0 to 1)
      vec2 uv = fragCoord/iResolution.xy;
      // 网格化像素坐标
      vec3 color = fbm_noise(uv);
      vec4 noiseColor = vec4(color,1.);

      fragColor = textColor * 0.6 + noiseColor * 0.4;
  }

  void main () {
    vec4 textColor = texture2D(texture,v_uv0);
    mainImage(gl_FragColor,v_uv0.xy * iResolution.xy,textColor);
  }
}%
