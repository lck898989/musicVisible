{
  "ver": "1.0.23",
  "uuid": "8469d0ce-2afb-4879-8f4d-db78c525ed17",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 iResolution;\nuniform float time;\nvec2 random2(vec2 uv){\n    float res = fract(sin(dot(uv.xy,vec2(132.090,989.232))) * 232324.123);\n  return vec2(res);\n}\nvec3 cellNoise(vec2 uv) {\n  uv *= 3.0;\n    vec2 i_st = floor(uv);\n    vec2 f_st = fract(uv);\n    \n    /*vec2 point = random2(i);\n    vec2 dist = point - f;\n    float di = length(dist);\n    */\n    vec3 color = vec3(0.);\n    float m_dist = 1.;\n    for(int i = -1; i <=1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 neighbor = vec2(float(j),float(i));\n          vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5 * sin(time + 6.283 * point);\n\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n            m_dist = min(m_dist,dist);\n        }\n    }\n    color += m_dist;\n    return color;\n}\nvec3 fbm_noise(vec2 uv) {\n    vec3 res = vec3(0.);\n    float a = 0.0;\n    float b = 0.0;\n    for(int i = 0; i < 10; i++) {\n      a += (float(i) + 1.);\n      b = 1. / a;\n      res += b * cellNoise(a * uv);\n    }\n  return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord,vec4 textColor)\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = fbm_noise(uv);\n    vec4 noiseColor = vec4(color,1.);\n\n    fragColor = textColor * 0.6 + noiseColor * 0.4;\n}\n\nvoid main () {\n  vec4 textColor = texture2D(texture,v_uv0);\n  mainImage(gl_FragColor,v_uv0.xy * iResolution.xy,textColor);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform ARGS {\n  vec2 iResolution;\n  float time\n}\nfloat random(vec2 uv) {\n  return fract(sin(dot(uv.xy,vec2(13.0909,783.342))) * 423234.323);\n}\nvec2 random2(vec2 uv){\n    float res = fract(sin(dot(uv.xy,vec2(132.090,989.232))) * 232324.123);\n  return vec2(res);\n}\nvec3 cellNoise(vec2 uv) {\n  uv *= 3.0;\n    vec2 i_st = floor(uv);\n    vec2 f_st = fract(uv);\n    \n    /*vec2 point = random2(i);\n    vec2 dist = point - f;\n    float di = length(dist);\n    */\n    vec3 color = vec3(0.);\n    float m_dist = 1.;\n    for(int i = -1; i <=1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 neighbor = vec2(float(j),float(i));\n          vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5 * sin(time + 6.283 * point);\n\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n            m_dist = min(m_dist,dist);\n        }\n    }\n    color += m_dist;\n    return color;\n}\nvec3 fbm_noise(vec2 uv) {\n    vec3 res = vec3(0.);\n    float a = 0.0;\n    float b = 0.0;\n    for(int i = 0; i < 10; i++) {\n      a += (float(i) + 1.);\n      b = 1. / a;\n      res += b * cellNoise(a * uv);\n    }\n  return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord,vec4 textColor)\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = fbm_noise(uv);\n    vec4 noiseColor = vec4(color,1.);\n\n    fragColor = textColor * 0.6 + noiseColor * 0.4;\n}\n\nvoid main () {\n  vec4 textColor = texture2D(texture,v_uv0);\n  mainImage(gl_FragColor,v_uv0.xy * iResolution.xy,textColor);\n}\n"
      }
    }
  ],
  "subMetas": {}
}