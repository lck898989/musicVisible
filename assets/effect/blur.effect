// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform ARGS {
    vec2 iResolution;
    float time;
  }
  void main () {
    vec2 uv = v_uv0;
    // uv.x = dFdx(uv.x) * 10.;
    // vec2 dx = vec2(uv.x);
    // uv.y = dFdy(uv.y) * 10.;
    // vec2 dy = vec2(uv.y);
    vec4 maskColor = vec4(0.5,0.5,0.5,1.);
    maskColor.a += 0.01 * sin(uv.x * 10. + time);
    uv += 0.05 * sin(uv * 10.);
    vec4 textColor = texture2D(texture,uv);
    uv -= 0.05 * sin(uv * 12.);
    textColor = texture2D(texture,uv);
    textColor += maskColor;
    float factor = 1.5;
    factor += 0.02 * sin(uv.x * 10. + time);
    gl_FragColor = mix(textColor,maskColor,1.5);
  }
}%
