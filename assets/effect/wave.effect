// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;
  uniform ARGS {
    vec2 iResolution;
    float time;
  }
  in vec2 v_uv0;
  uniform sampler2D texture;
  void main () {
    vec2 uv = v_uv0.xy;
    float r = 0.6;
    // uv += vec2(0.,0.02 * sin((uv.x + uv.y) * 10. + time));
    // uv += vec2(0.,0.01 * sin((uv.x - uv.y) * 9. + time * 2.3));
    float factor = 0.;
    float dis = distance(uv,vec2(0.5,0.5));
    // 在限定的半径范围内进行uv动画
    float disFactor = 0.04;
    if(dis < r) {
      // factor *= disFactor;
      // 根据距离改变衰减系数
      disFactor *= 1. - dis / r;
      factor = disFactor * sin(-dis * 10. + time);
      uv += vec2(0.,factor);
      // vec4 textColor = texture2D(texture,uv);
    }
    vec4 targetColor = texture2D(texture,uv);// + vec4(1.,1.,1.,1.) * clamp(factor,0.,1.) * 20.;
    gl_FragColor = targetColor;
  }
}%
