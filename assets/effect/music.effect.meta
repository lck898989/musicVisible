{
  "ver": "1.0.23",
  "uuid": "6b5596e8-ba73-4715-b1bb-d60f5d6a8ca3",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 iResolution;\nuniform sampler2D tex;\nuniform float time;\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = (fragCoord.xy / iResolution.xy);\n\n  uv -= vec2(0.5);\n  uv.x *= iResolution.x/iResolution.y;\n\n  float r = length(uv);\n  float a = atan(uv.y, uv.x);\n\n  const float it = 5.0;\n  float c = 0.0;\n  for( float i = 0.0 ; i < it ; i += 1.0 )\n  {\n      float i01 = i / it;\n      float rnd = texture( iChannel0, vec2(i01)).x;\n      float react = 1.0 * texture( iChannel1, vec2(i01, 0.0) ).x;    \n      \n      float c1 = (uv.x + 1.1 + react) * 0.004 * abs( 1.0 / sin( (uv.y +0.25) +\n                                                       sin(uv.x * 4.0 * rnd + rnd * 7.0 + time * 0.75) *\n                                                               (0.01 + 0.15*react)));\n      c = clamp(c + c1, 0.0, 1.0);\n  }\n  \n  float s = 0.0;\n  const float it2 = 20.0;\n  for( float i = 0.0 ; i < it2 ; i += 1.0 )\n  {\n      float i01 = i / it2;       \n      float react = 1.0 * texture( iChannel1, vec2(i01, 0.0) ).x;  \n      vec2 rnd = texture( iChannel0, vec2(i01)).xy;\n      vec2 rnd2 = rnd - 0.5;\n    \n      rnd2 = vec2(0.85*sin(rnd2.x * 200.0 + rnd2.y * time * 0.1), \n                  -0.1 - 0.15 * sin(rnd2.x * rnd2.x * 200.0 + time  * rnd2.x * 0.25));\n      \n      float r1 = 1.0 - length(uv - rnd2);\n      float rad = ( 1.0 - clamp(0.03 * rnd.y + react * 0.05, 0.0, 1.0) );\n\n      r1 = smoothstep(rad, rad + 0.015, r1);\n      s += r1;\n  }\n\n  vec3 bg = mix( vec3(0.93, 0.71, 0.62), vec3(0.9, 0.44, 0.44), r);\n  bg = mix(bg, vec3(0.9, 0.91, 0.62), c);\n  bg = mix(bg, vec3(0.9, 0.91, 0.82), s);\n  \n  fragColor = vec4(bg, 1.0);\n}\n*/\nvoid main () {\n  vec2 uv = vec2(v_uv0.x,v_uv0.y);\n  if(uv.y > 0.5) {\n    discard;\n  }\n  vec4 testColor = texture2D(tex,uv);\n  vec2 res = sin(testColor.xy / v_uv0.xy) * 0.5 + 0.5;\n\n  gl_FragColor = vec4(res,testColor.b,1.0);\n  vec4 changeColor = texture2D(tex,v_uv0);\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform ARGS {\n  vec2 iResolution;\n  sampler2D tex;\n  float time;\n}\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = (fragCoord.xy / iResolution.xy);\n\n  uv -= vec2(0.5);\n  uv.x *= iResolution.x/iResolution.y;\n\n  float r = length(uv);\n  float a = atan(uv.y, uv.x);\n\n  const float it = 5.0;\n  float c = 0.0;\n  for( float i = 0.0 ; i < it ; i += 1.0 )\n  {\n      float i01 = i / it;\n      float rnd = texture( iChannel0, vec2(i01)).x;\n      float react = 1.0 * texture( iChannel1, vec2(i01, 0.0) ).x;    \n      \n      float c1 = (uv.x + 1.1 + react) * 0.004 * abs( 1.0 / sin( (uv.y +0.25) +\n                                                       sin(uv.x * 4.0 * rnd + rnd * 7.0 + time * 0.75) *\n                                                               (0.01 + 0.15*react)));\n      c = clamp(c + c1, 0.0, 1.0);\n  }\n  \n  float s = 0.0;\n  const float it2 = 20.0;\n  for( float i = 0.0 ; i < it2 ; i += 1.0 )\n  {\n      float i01 = i / it2;       \n      float react = 1.0 * texture( iChannel1, vec2(i01, 0.0) ).x;  \n      vec2 rnd = texture( iChannel0, vec2(i01)).xy;\n      vec2 rnd2 = rnd - 0.5;\n    \n      rnd2 = vec2(0.85*sin(rnd2.x * 200.0 + rnd2.y * time * 0.1), \n                  -0.1 - 0.15 * sin(rnd2.x * rnd2.x * 200.0 + time  * rnd2.x * 0.25));\n      \n      float r1 = 1.0 - length(uv - rnd2);\n      float rad = ( 1.0 - clamp(0.03 * rnd.y + react * 0.05, 0.0, 1.0) );\n\n      r1 = smoothstep(rad, rad + 0.015, r1);\n      s += r1;\n  }\n\n  vec3 bg = mix( vec3(0.93, 0.71, 0.62), vec3(0.9, 0.44, 0.44), r);\n  bg = mix(bg, vec3(0.9, 0.91, 0.62), c);\n  bg = mix(bg, vec3(0.9, 0.91, 0.82), s);\n  \n  fragColor = vec4(bg, 1.0);\n}\n*/\nvoid main () {\n  vec2 uv = vec2(v_uv0.x,v_uv0.y);\n  if(uv.y > 0.5) {\n    discard;\n  }\n  vec4 testColor = texture2D(tex,uv);\n  vec2 res = sin(testColor.xy / v_uv0.xy) * 0.5 + 0.5;\n\n  gl_FragColor = vec4(res,testColor.b,1.0);\n  vec4 changeColor = texture2D(tex,v_uv0);\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}