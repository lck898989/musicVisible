// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform ARGS {
    vec2 iResolution;
    float time;
  }
  // "Fireworks" by Martijn Steinrucken aka BigWings - 2015
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode

  #define PI 3.141592653589793238
  #define TWOPI 6.283185307179586
  #define S(x,y,z) smoothstep(x,y,z)
  #define B(x,y,z,w) S(x-z, x+z, w)*S(y+z, y-z, w)
  #define saturate(x) clamp(x,0.,1.)

  #define NUM_EXPLOSIONS 8.
  #define NUM_PARTICLES 70.


  // Noise functions by Dave Hoskins 
  #define MOD3 vec3(.1031,.11369,.13787)
  vec3 hash31(float p) {
    vec3 p3 = fract(vec3(p) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));
  }
  float hash12(vec2 p){
    vec3 p3  = fract(vec3(p.xyx) * MOD3);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
  }

  float circ(vec2 uv, vec2 pos, float size) {
    uv -= pos;
      
      size *= size;
      return S(size*1.1, size, dot(uv, uv));
  }

  float light(vec2 uv, vec2 pos, float size) {
    uv -= pos;
      
      size *= size;
      return size/dot(uv, uv);
  }
  // 爆炸效果生成函数
  vec3 explosion(vec2 uv, vec2 p, float seed, float t) {
    
      vec3 col = vec3(0.);
      
      vec3 en = hash31(seed);
      vec3 baseCol = en;
      // 生成微粒，粒子特效
      for(float i=0.; i<NUM_PARTICLES; i++) {
        vec3 n = hash31(i)-.5;
        
        vec2 startP = p-vec2(0., t*t*.1);        
        vec2 endP = startP+normalize(n.xy)*n.z;
        float pt = 1.-pow(t-1., 2.);
        vec2 pos = mix(p, endP, pt);    
        float size = mix(.01, .005, S(0., .1, pt));
        size *= S(1., .1, pt);
        
        float sparkle = (sin((pt+n.z)*100.)*.5+.5);
        sparkle = pow(sparkle, pow(en.x, 3.)*50.)*mix(0.01, .01, en.y*n.y);
      
        //size += sparkle*B(.6, 1., .1, t);
        size += sparkle*B(en.x, en.y, en.z, t);
        
        col += baseCol*light(uv, pos, size);
      }
      
      return col;
  }

  vec3 Rainbow(vec3 c) {
    
      float t=time;
      
      float avg = (c.r+c.g+c.b)/3.;
      c = avg + (c-avg)*sin(vec3(0., .333, .666)+t);
      
      c += sin(vec3(.4, .3, .3)*t + vec3(1.1244,3.43215,6.435))*vec3(.4, .1, .5);
      
      return c;
  }

  void mainImage( out vec4 fragColor, in vec2 fragCoord )
  {
    // 纹理坐标归一化
    vec2 uv = fragCoord.xy / iResolution.xy;
    // uv.x 取值范围【-0.5，0.5】
    uv.x -= .5;
    uv.x *= iResolution.x/iResolution.y;
    
    float n = hash12(uv+10.);
    float t = time*.5;
    
    vec3 c = vec3(0.);
    // 爆炸的个数
    for(float i=0.; i<NUM_EXPLOSIONS; i++) {
      float et = t+i*1234.45235;
      float id = floor(et);
      et -= id;
      
      vec2 p = hash31(id).xy;
      p.x -= .5;
      p.x *= 1.6;
      c += explosion(uv, p, id, et);
    }
    c = Rainbow(c);
    
    fragColor = vec4(c, 1.);
  }

  void main () {
    mainImage(gl_FragColor,v_uv0.xy * iResolution.xy);
  }
}%
