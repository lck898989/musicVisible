{
  "ver": "1.0.23",
  "uuid": "379fcc23-8d41-4b66-ba03-45be7b43a582",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float time;\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord,vec2 res) {\n\n  vec2 sp = (fragCoord * 2. - res.xy) / min(res.y,res.x);\n\n  sp.y *= dot(sp,sp);\n  float color = 0.;\n  for(int i = 0; i < 5; i++) { \n    float t = float(i + 10) + sin(time * 0.6 + float(i));\n    color += 0.05 / distance(sp,vec2(sp.x,cos(t + sp.x)));\n  }\n  fragColor = vec4(color * vec3(.0+cos(time*0.5)*0.025+0.025, 0.05+cos(time*1.1)*0.025+0.025, 0.05+cos(time*.72)*0.025+0.025), 1.0);\n}\n\nvoid main () {\n  vec2 res = vec2(300.,300.);\n\n  mainImage(gl_FragColor,v_uv0.xy * res.xy,res);\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform ARGS {\n  vec2 iResolution;\n  float time;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord,vec2 res) {\n\n  vec2 sp = (fragCoord * 2. - res.xy) / min(res.y,res.x);\n\n  sp.y *= dot(sp,sp);\n  float color = 0.;\n  for(int i = 0; i < 5; i++) { \n    float t = float(i + 10) + sin(time * 0.6 + float(i));\n    color += 0.05 / distance(sp,vec2(sp.x,cos(t + sp.x)));\n  }\n  fragColor = vec4(color * vec3(.0+cos(time*0.5)*0.025+0.025, 0.05+cos(time*1.1)*0.025+0.025, 0.05+cos(time*.72)*0.025+0.025), 1.0);\n}\n\nvoid main () {\n  vec2 res = vec2(300.,300.);\n\n  mainImage(gl_FragColor,v_uv0.xy * res.xy,res);\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}