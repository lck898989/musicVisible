{
  "ver": "1.0.23",
  "uuid": "379fcc23-8d41-4b66-ba03-45be7b43a582",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 iResolution;\nuniform float time;\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n  vec2 uv = (fragCoord.xy / iResolution.xy);\n  float offsetX = sin(time * .5) * 0.5 + 0.5;\n  float offsetY = cos(time * .5) * 0.5 + 0.5;\n  ivec2 offsetI = ivec2(floor(offsetX),floor(offsetY));\n  vec4 textColor = texture2D(texture,uv);\n  vec4 maskColor = vec4(1.);\n\n  maskColor.r *= clamp(offsetX,0.2,0.8);\n  maskColor.g *= clamp(offsetY,0.1,0.7);\n  maskColor.b *= clamp(offsetX,0.4,0.6);\n  maskColor.a = 0.5;\n\n  fragColor = mix(textColor,maskColor,maskColor);\n}\nvoid main () {\n  mainImage(gl_FragColor,v_uv0.xy * iResolution.xy);\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform ARGS {\n  vec2 iResolution;\n  float time;\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n  vec2 uv = (fragCoord.xy / iResolution.xy);\n  float offsetX = sin(time * .5) * 0.5 + 0.5;\n  float offsetY = cos(time * .5) * 0.5 + 0.5;\n  ivec2 offsetI = ivec2(floor(offsetX),floor(offsetY));\n  vec4 textColor = texture2D(texture,uv);\n  vec4 maskColor = vec4(1.);\n\n  maskColor.r *= clamp(offsetX,0.2,0.8);\n  maskColor.g *= clamp(offsetY,0.1,0.7);\n  maskColor.b *= clamp(offsetX,0.4,0.6);\n  maskColor.a = 0.5;\n\n  fragColor = mix(textColor,maskColor,maskColor);\n}\nvoid main () {\n  mainImage(gl_FragColor,v_uv0.xy * iResolution.xy);\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}