// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform ARGS {
    vec2 iResolution;
    float time;
  }
  void mainImage(out vec4 fragColor,in vec2 fragCoord) {
    vec2 uv = (fragCoord.xy / iResolution.xy);
    float offsetX = sin(time * .5) * 0.5 + 0.5;
    float offsetY = cos(time * .5) * 0.5 + 0.5;
    ivec2 offsetI = ivec2(floor(offsetX),floor(offsetY));
    vec4 textColor = texture2D(texture,uv);
    vec4 maskColor = vec4(1.);
    // uv -= vec2(offsetX,offsetY);
    maskColor.r *= clamp(offsetX,0.2,0.8);
    maskColor.g *= clamp(offsetY,0.1,0.7);
    maskColor.b *= clamp(offsetX,0.4,0.6);
    maskColor.a = 0.5;

    // fragColor = v_color;
    fragColor = mix(textColor,maskColor,maskColor);
  }
  /*
  #define ANGLE 60.0

float startX = 0.0;
float thresholdX = 0.08;
float blur = 0.04;
float posInterval = 0.02;

float colFactor(vec2 uv, float thresholdX, float blur){
    float intervalY = uv.y;
    float tempX = intervalY * cos(radians(ANGLE)) + startX;
    float intervalX = uv.x - tempX;
    return smoothstep(thresholdX, thresholdX - blur, abs(intervalX));
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    startX = tan(iTime);
    float factor = colFactor(uv, thresholdX, blur);
    fragColor = factor * vec4(1.0, 0.8, 0.8, 1.0) + vec4(0.0) * (1.0 - factor);
}*/
  void main () {
    mainImage(gl_FragColor,v_uv0.xy * iResolution.xy);
    // mainImage()
  }
}%
